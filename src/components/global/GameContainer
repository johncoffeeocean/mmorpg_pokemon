import Phaser from "phaser";
import map from "./../../assets/images/map.jpeg";
import CharacterImage from "./../../assets/images/character-image.png";
import points from "./../../assets/images/points.png";
// import './App.css';
import mapData from './../../assets/mapInfo';
import PointObject from './PointsGroup';

var GameContainer=new Phaser.Game({
    title: "Game Title",
    type: Phaser.AUTO,
    width: window.innerWidth * 8 / 12,
    height: window.innerHeight,
    parent: "game-container",
    scene: {
      preload: function () {
        this.load.image("background", map);
        this.load.spritesheet("pointList", points, {
          frameWidth: 500,
          frameHeight: 500
        });
        this.load.image("characterImage", CharacterImage)

      },

      create: function () {
        const bg = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY, "background");
        console.log(this.cameras.main.centerX, this.cameras.main.centerY)
        bg.setDisplaySize(this.cameras.main.width, this.cameras.main.height);
        let mapPoint = mapData.point;
        for (let i = 1; i < mapPoint.length; i++) {
          if (mapPoint[i][1][0] > 0) {
            const pointObject = new PointObject(i, mapPoint[i], this, buttonClickHandle);
            pointObject.create()
            pointList.push(pointObject)
          }

        }
        pointList[startNode-1].point.setTexture("characterImage")
        pointList[startNode-1].point.setFrame(0)
        pointList[startNode-1].point.setDisplaySize(25/this.cameras.main.zoom,25/this.cameras.main.zoom)
        
        this.input.on('wheel', function (pointer, gameObjects, deltaX, deltaY, deltaZ) {

          const center = new Phaser.Math.Vector2(window.innerWidth / 2, window.innerHeight / 2);
          const speed = 0.3;
          const maxZoomIn = 1;
          const maxZoomOut = 5;

          if (deltaY > 0 && this.cameras.main.zoom > maxZoomIn) {
            this.cameras.main.zoom -= speed;
          } else if (deltaY < 0 && this.cameras.main.zoom < maxZoomOut) {
            this.cameras.main.zoom += speed;
          }
          const worldPoint = this.input.activePointer.positionToCamera(this.cameras.main);
          const diff = worldPoint.clone().subtract(center);
          for (let i = 0; i < pointList.length; i++) {
            pointList[i].point.setDisplaySize(25 / this.cameras.main.zoom, 25 / this.cameras.main.zoom)
          }
        }, this);
        let pointerDown = false;
        let dragStartX = 0;
        let dragStartY = 0;
        this.input.on('pointerdown', function (pointer) {
          if (pointer.leftButtonDown()) {
            pointerDown = true;
            dragStartX = pointer.x;
            dragStartY = pointer.y;
            this.input.setDefaultCursor('grab');
          }
        }, this);

        this.input.on('pointerup', function (pointer) {
          if (pointer.leftButtonReleased()) {
            pointerDown = false;
            this.input.setDefaultCursor('default');
          }
        }, this);

        this.input.on('pointermove', function (pointer) {
          if (pointerDown) {
            const diffX = pointer.x - dragStartX;
            const diffY = pointer.y - dragStartY;
            this.cameras.main.scrollX -= diffX / this.cameras.main.zoom;
            this.cameras.main.scrollY -= diffY / this.cameras.main.zoom;
            dragStartX = pointer.x
            dragStartY = pointer.y
          }
        }, this);
        this.input.on('gameout', function () {
          if (pointerDown) {
            pointerDown=false
          }
        }, this);
      }
    }
  });
  export default GameContainer;